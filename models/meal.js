const { Timestamp } = require("mongodb");
const { getDb } = require("../util/database")

/** Class representing a Meal log.
 * 
 * The property "timeStamp" is created on the server itself.
 * 
 * The property "id" is generated by MongoDb.
 */
class Meal {
    /**
     * 
     * @param {string} userId - Username of the user adding the log.
     * @param {Array.<String>} hashtags - A list of hashtags associated with the meal.
     * @param {string} foodItems - A list of food items associated with the meal.
     * @property {Date} timeStamp - Captures the time, the log is added. 
    */
    constructor(userId, hashtags, foodItems) {
        this.userId = userId;
        this.hashtags = hashtags;
        this.foodItems = foodItems;
        this.timeStamp = new Date().toISOString();
    };

    /**
     * Saves the newly created Meal Log to database.
     * @returns {Promise} Returns a result of transaction on MongoDB database.
     */
    async save() {
        const db = getDb();
        return db.collection("logs").insertOne(this).then(
            (result) => {
                return result;
            }
        ).catch(
            (err) => {
                console.log(err);
                throw err;
            }
        );
    }

    /**
     * Queries database for all the logs.
     * @returns {Promise} Promise resolving to a list of all logs.
     */
    static async fetchAll() {
        const db = getDb();
        return db.collection("logs").find().toArray().then(
            (data) => {
                return data;
            }
        ).catch(
            (err) => {
                console.log(err);
                throw err;
            }
        );
    }

    /**
     * Queries database for logs having userId equal to given id.
     * @param {string} id - The userId, whose logs are to be fetched.
     * @returns {Promise} Promise resolving to a list of all logs
     * associated with given user id. 
     */
    static async fetchWithId(id) {
        const db = getDb();
        return db.collection("logs").find({ userId: id }).toArray().then(data => {
            return data;
        }).catch(err => {
            console.log(err);
            throw err;
        })
    }
};

module.exports = Meal;